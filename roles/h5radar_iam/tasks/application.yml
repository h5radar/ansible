---

- name: check if keycloak is downloaded
  stat:
    path: "/tmp/keycloak-{{ h5radar_iam__keycloak_version }}.tar.gz"
  register: file

- name: download keycloak
  ansible.builtin.get_url:
    url: "{{ h5radar_iam__keycloak_package }}"
    dest: "/tmp/keycloak-{{ h5radar_iam__keycloak_version }}.tar.gz"
  when: not file.stat.exists

- name: stop services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
  with_items:
    - "{{ h5radar_iam__service_units }}"

- name: Create directories for application
  file:
    path: "{{ item }}"
    owner: "{{ h5radar_iam__user }}"
    group: "{{ h5radar_iam__group }}"
    state: directory
    mode: "0755"
  with_items:
    - "{{ h5radar_iam__root_path }}/"
    - "{{ h5radar_iam__root_path }}/releases"
    - "{{ h5radar_iam__release_path }}"

- name: unarchive keycloak
  unarchive:
    src: "/tmp/keycloak-{{ h5radar_iam__keycloak_version }}.tar.gz"
    dest: "{{ h5radar_iam__root_path }}/releases"
    owner: "{{ h5radar_iam__user }}"
    group: "{{ h5radar_iam__group }}"
    remote_src: yes

- name: configure keycloak
  ansible.builtin.template:
    src: "home/h5radar_iam/releases/keycloak-version/conf/{{ item }}.j2"
    dest: "{{ h5radar_iam__release_path }}/conf/{{ item }}"
    owner: "{{ h5radar_iam__user }}"
    group: "{{ h5radar_iam__user }}"
    mode: "0644"
  with_items:
    - keycloak.conf

- name: start services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
  with_items:
    - "{{ h5radar_iam__service_units }}"
